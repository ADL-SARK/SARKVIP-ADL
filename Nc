-- Shattuck 通知模块（自动显示版）
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local Shattuck = {}
local activeNotifications = {}

local CONFIG = {
    SIZE = 120,
    SPACING = 8,
    OFFSET_X = 20,
    OFFSET_Y = 20,
    CORNER_RADIUS = 8,
    TITLE = {FONT = Enum.Font.GothamBold, SIZE = 16, COLOR = Color3.fromRGB(255,255,255)},
    MESSAGE = {FONT = Enum.Font.Gotham, SIZE = 12, COLOR = Color3.fromRGB(220,220,220)},
    ANIMATION = {DURATION = 0.4, EASING_STYLE = Enum.EasingStyle.Elastic, EASING_DIRECTION = Enum.EasingDirection.Out}
}

local blendColors = {Color3.fromRGB(0,255,255), Color3.fromRGB(255,0,255), Color3.fromRGB(255,105,180)}

local function interpolateColors(colors,t)
    local count = #colors
    local segment = math.floor(t*count)%count+1
    local nextSegment = (segment%count)+1
    local alpha = (t*count)%1
    local c1 = colors[segment]
    local c2 = colors[nextSegment]
    return Color3.new(c1.R+(c2.R-c1.R)*alpha, c1.G+(c2.G-c1.G)*alpha, c1.B+(c2.B-c1.B)*alpha)
end

local function initializeGui()
    local player = Players.LocalPlayer
    local gui = player:WaitForChild("PlayerGui"):FindFirstChild("NotificationGui")
    if not gui then
        gui = Instance.new("ScreenGui")
        gui.Name = "NotificationGui"
        gui.IgnoreGuiInset = true
        gui.ResetOnSpawn = false
        gui.DisplayOrder = 1000
        gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        gui.Parent = player.PlayerGui
    end
    return gui
end

local function updateNotificationsPosition()
    for i,notif in ipairs(activeNotifications) do
        local yOffset = (CONFIG.SIZE + CONFIG.SPACING)*(i-1)
        TweenService:Create(notif.frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            Position = UDim2.new(1, -CONFIG.OFFSET_X, 0, CONFIG.OFFSET_Y + yOffset)
        }):Play()
    end
end

local NotifyClass = {}
NotifyClass.__index = NotifyClass

function Shattuck.Notify()
    local self = setmetatable({}, NotifyClass)
    self._Script = ""
    self._Name = ""
    self._Rainbow = false
    self._Transparency = false
    self._Duration = 4
    return self
end

function NotifyClass:Script(text) self._Script = text or "" return self end
function NotifyClass:Name(text) self._Name = text or "" return self end
function NotifyClass:rainbow(value) self._Rainbow = value or false return self end
function NotifyClass:transparency(value) self._Transparency = value or false return self end
function NotifyClass:Duration(value) self._Duration = value or 4 return self end

-- 自动显示
function NotifyClass:ShowNotification()
    local gui = initializeGui()
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, CONFIG.SIZE, 0, CONFIG.SIZE)
    frame.Position = UDim2.new(1, CONFIG.SIZE, 0, CONFIG.OFFSET_Y)
    frame.AnchorPoint = Vector2.new(1,0)
    frame.BackgroundColor3 = Color3.fromRGB(0,0,0)
    frame.BackgroundTransparency = self._Transparency and 0.7 or 0
    frame.BorderSizePixel = 0
    frame.ZIndex = 10
    frame.Parent = gui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, CONFIG.CORNER_RADIUS)
    corner.Parent = frame

    local strokeConnection
    if self._Rainbow then
        local stroke = Instance.new("UIStroke")
        stroke.Thickness = 2
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        stroke.Color = blendColors[1]
        stroke.Parent = frame

        local colorTime = 0
        strokeConnection = RunService.RenderStepped:Connect(function(dt)
            colorTime += dt*0.5
            stroke.Color = interpolateColors(blendColors, colorTime%1)
            if not frame or not frame.Parent then strokeConnection:Disconnect() end
        end)
    end

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -16, 0, 24)
    titleLabel.Position = UDim2.new(0,8,0,8)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = self._Script
    titleLabel.Font = CONFIG.TITLE.FONT
    titleLabel.TextSize = CONFIG.TITLE.SIZE
    titleLabel.TextColor3 = CONFIG.TITLE.COLOR
    titleLabel.TextXAlignment = Enum.TextXAlignment.Center
    titleLabel.TextTransparency = 1
    titleLabel.ZIndex = 11
    titleLabel.Parent = frame

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Size = UDim2.new(1, -16, 1, -36)
    messageLabel.Position = UDim2.new(0,8,0,28)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = self._Name
    messageLabel.Font = CONFIG.MESSAGE.FONT
    messageLabel.TextSize = CONFIG.MESSAGE.SIZE
    messageLabel.TextColor3 = CONFIG.MESSAGE.COLOR
    messageLabel.TextWrapped = true
    messageLabel.TextTruncate = Enum.TextTruncate.AtEnd
    messageLabel.TextXAlignment = Enum.TextXAlignment.Center
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.TextTransparency = 1
    messageLabel.ZIndex = 11
    messageLabel.Parent = frame

    TweenService:Create(frame, TweenInfo.new(CONFIG.ANIMATION.DURATION, CONFIG.ANIMATION.EASING_STYLE, CONFIG.ANIMATION.EASING_DIRECTION), {
        Position = UDim2.new(1, -CONFIG.OFFSET_X, 0, CONFIG.OFFSET_Y)
    }):Play()
    TweenService:Create(titleLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
    TweenService:Create(messageLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()

    table.insert(activeNotifications, {frame = frame})
    updateNotificationsPosition()

    task.delay(self._Duration, function()
        TweenService:Create(frame, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
            Position = UDim2.new(1, CONFIG.SIZE, 0, CONFIG.OFFSET_Y)
        }):Play()
        TweenService:Create(titleLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
        TweenService:Create(messageLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
        task.delay(0.4, function()
            frame:Destroy()
            if strokeConnection then strokeConnection:Disconnect() end
            for i,v in ipairs(activeNotifications) do
                if v.frame == frame then table.remove(activeNotifications,i) break end
            end
            updateNotificationsPosition()
        end)
    end)
end

-- 自动显示通知
local oldNotify = Shattuck.Notify
Shattuck.Notify = function()
    local notifyInstance = oldNotify()
    task.defer(function() notifyInstance:ShowNotification() end)
    return notifyInstance
end

return Shattuck
